{
	"info": {
		"_postman_id": "bd1bf4bc-5264-4894-8801-bc8a59d0087a",
		"name": "feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38250216"
	},
	"item": [
		{
			"name": "Comment",
			"item": [
				{
					"name": "Добавление нового комментария к событию инициатором события",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let comment;\r",
									"    try {\r",
									"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uinid\", userInitiatorEvent.id);\r",
									"\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        \r",
									"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"\r",
									"        comment = rnd.getComment();\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, author, created, lastUpdate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('created');\r",
									"pm.expect(target).to.have.property('lastUpdate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должно соответствовать названию события в запросе');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments?eventId={{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "{{eid}}",
									"description": "(Required) id события"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uinid}}",
									"description": "(Required) id пользователя"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление нового комментария к событию пользователем с одобренным статусом участия",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let comment;\r",
									"    try {\r",
									"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
									"\r",
									"        const userComentator = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", userComentator.id);\r",
									"\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"\r",
									"        let eventModel = rnd.getEvent(category.id);\r",
									"        eventModel.participantLimit = 0;\r",
									"        eventModel.requestModeration = false;\r",
									"        \r",
									"        let event = await api.addEvent(userInitiatorEvent.id, eventModel);\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"        \r",
									"        comment = rnd.getComment();\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, author, created, lastUpdate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('created');\r",
									"pm.expect(target).to.have.property('lastUpdate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должно соответствовать названию события в запросе');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments?eventId={{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "{{eid}}",
									"description": "(Required) id события"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id пользователя"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение всех комментариев события",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        \r",
									"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"\r",
									"        await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"    pm.expect(pm.response.json()).is.an('array');\r",
									"});\r",
									"\r",
									"const target = pm.response.json()[0];\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, author, created, lastUpdate\", function () {\r",
									"    pm.expect(target).to.contain.keys('id', 'text', 'author', 'created', 'lastUpdate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/comments?eventId={{eid}}&from=0&size=1000",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "{{eid}}",
									"description": "(Required) id события"
								},
								{
									"key": "from",
									"value": "0"
								},
								{
									"key": "size",
									"value": "1000",
									"description": "количество элементов в наборе"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получение комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        \r",
									"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"\r",
									"        let comment = await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
									"        pm.collectionVariables.set(\"cid\", comment.id)\r",
									"        pm.collectionVariables.set('response', JSON.stringify(comment));\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.collectionVariables.get('response'));\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, author, created, lastUpdate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('created');\r",
									"pm.expect(target).to.have.property('lastUpdate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.id).to.not.be.null;\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должно соответствовать тексту комментария в запросе');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/comments/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"comments",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{cid}}",
									"description": "(Required) id комменатрия"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Редактирование комментария автором",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    \r",
									"    let newComment\r",
									"    try {\r",
									"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", userInitiatorEvent.id)\r",
									"        \r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"\r",
									"        let oldComment = await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
									"        pm.collectionVariables.set(\"cid\", oldComment.id)\r",
									"\r",
									"        newComment = rnd.getComment();\r",
									"        pm.collectionVariables.set('response', JSON.stringify(newComment));\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify(newComment),\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.collectionVariables.get('response'));\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, author, created, lastUpdate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('created');\r",
									"pm.expect(target).to.have.property('lastUpdate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должно соответствовать искомому комментарию')\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId?eventId={{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"query": [
								{
									"key": "eventId",
									"value": "{{eid}}",
									"description": "(Required) id события"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id пользователя"
								},
								{
									"key": "commentId",
									"value": "{{cid}}",
									"description": "(Required) id комменатрия"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Редактирование комментария администратором",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"    \r",
									"    let newComment\r",
									"    try {\r",
									"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"\r",
									"        let oldComment = await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
									"        pm.collectionVariables.set(\"cid\", oldComment.id)\r",
									"\r",
									"        newComment = rnd.getComment();\r",
									"        pm.collectionVariables.set('response', JSON.stringify(newComment));\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"            mode: 'raw',\r",
									"            raw: JSON.stringify(newComment),\r",
									"            options: { raw: { language: 'json' } }\r",
									"        });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
									"    pm.response.to.be.ok;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.collectionVariables.get('response'));\r",
									"const target = pm.response.json();\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, author, created, lastUpdate\", function () {\r",
									"pm.expect(target).to.have.property('id');\r",
									"pm.expect(target).to.have.property('text');\r",
									"pm.expect(target).to.have.property('author');\r",
									"pm.expect(target).to.have.property('created');\r",
									"pm.expect(target).to.have.property('lastUpdate');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(target.text).equal(source.text, 'Текст комментария должно соответствовать искомому комментарию')\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{cid}}",
									"description": "(Required) id комменатрия"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария администратором",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"const source = JSON.parse(pm.collectionVariables.get(\"response\"));\r",
									"const commentId = pm.collectionVariables.get(\"cid\");\r",
									"\r",
									"pm.test(\"Комментарий должен быть найден до выполнения запроса\", function(){\r",
									"    pm.expect(source).to.have.property('id');\r",
									"    pm.expect(source).to.have.property('text');\r",
									"    pm.expect(source).to.have.property('author');\r",
									"    pm.expect(source).to.have.property('created');\r",
									"    pm.expect(source).to.have.property('lastUpdate');\r",
									"    pm.expect(source.id.toString()).to.equal(commentId.toString()); \r",
									"});\r",
									"let body\r",
									"const req = {\r",
									"                url: \"http://localhost:8080/comments/\" + pm.collectionVariables.get(\"cid\"),\r",
									"                method: \"GET\",\r",
									"                body: body == null ? \"\" : JSON.stringify(body),\r",
									"                header: { \"Content-Type\": \"application/json\" },\r",
									"            };\r",
									"pm.sendRequest(req, (error, response) => {\r",
									"    pm.test(\"Комментарий должен быть удалён после выполнения запроса\", function(){\r",
									"        pm.expect(response.code).to.equal(404); \r",
									"    });\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        \r",
									"        const сomment = await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
									"        pm.collectionVariables.set(\"cid\", сomment.id);\r",
									"\r",
									"        const foundedComment = await api.findComment(сomment.id);\r",
									"        pm.collectionVariables.set(\"response\", JSON.stringify(foundedComment))\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "commentId",
									"value": "{{cid}}",
									"description": "(Required) id комменатрия"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление всех комментариев события администратором",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id);\r",
									"\r",
									"        await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
									"        const foundedComments = await api.findComments(event.id);\r",
									"        pm.collectionVariables.set(\"response\", JSON.stringify(foundedComments))\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"const source = JSON.parse(pm.collectionVariables.get(\"response\"));\r",
									"\r",
									"pm.test(\"Комментарий должен быть найден до выполнения запроса\", function(){\r",
									"    pm.expect(source.length).to.eql(1);\r",
									"    pm.expect(source[0]).to.have.property('id');\r",
									"    pm.expect(source[0]).to.have.property('text');\r",
									"    pm.expect(source[0]).to.have.property('author');\r",
									"    pm.expect(source[0]).to.have.property('created');\r",
									"    pm.expect(source[0]).to.have.property('lastUpdate');\r",
									"});\r",
									"let body\r",
									"const req = {\r",
									"                url: \"http://localhost:8080/comments?eventId=\" + pm.collectionVariables.get(\"eid\"),\r",
									"                method: \"GET\",\r",
									"                body: body == null ? \"\" : JSON.stringify(body),\r",
									"                header: { \"Content-Type\": \"application/json\" },\r",
									"            };\r",
									"pm.sendRequest(req, (error, response) => {\r",
									"    pm.test(\"Комментарий должен быть удалён после выполнения запроса\", function(){\r",
									"        pm.expect(response.json().length).to.eql(0);\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/comments?eventId={{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"comments"
							],
							"query": [
								{
									"key": "eventId",
									"value": "{{eid}}",
									"description": "(Required) id события"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария пользователем",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"const source = JSON.parse(pm.collectionVariables.get(\"response\"));\r",
									"const commentId = pm.collectionVariables.get(\"cid\");\r",
									"\r",
									"pm.test(\"Комментарий должен быть найден до выполнения запроса\", function(){\r",
									"    pm.expect(source).to.have.property('id');\r",
									"    pm.expect(source).to.have.property('text');\r",
									"    pm.expect(source).to.have.property('author');\r",
									"    pm.expect(source).to.have.property('created');\r",
									"    pm.expect(source).to.have.property('lastUpdate');\r",
									"    pm.expect(source.id.toString()).to.equal(commentId.toString()); \r",
									"});\r",
									"let body\r",
									"const req = {\r",
									"                url: \"http://localhost:8080/comments/\" + pm.collectionVariables.get(\"cid\"),\r",
									"                method: \"GET\",\r",
									"                body: body == null ? \"\" : JSON.stringify(body),\r",
									"                header: { \"Content-Type\": \"application/json\" },\r",
									"            };\r",
									"pm.sendRequest(req, (error, response) => {\r",
									"    pm.test(\"Комментарий должен быть удалён после выполнения запроса\", function(){\r",
									"        pm.expect(response.code).to.equal(404); \r",
									"    });\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
									"        const userComment = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uid\", userComment.id);\r",
									"        \r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let eventModel = rnd.getEvent(category.id);\r",
									"        eventModel.participantLimit = 0;\r",
									"        eventModel.requestModeration = false;\r",
									"        let event = await api.addEvent(userInitiatorEvent.id, eventModel);\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"\r",
									"        const сomment = await api.addComment(userComment.id, event.id, rnd.getComment());\r",
									"        pm.collectionVariables.set(\"cid\", сomment.id);\r",
									"\r",
									"        const foundedComment = await api.findComment(сomment.id);\r",
									"        pm.collectionVariables.set(\"response\", JSON.stringify(foundedComment))\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId?eventId={{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"query": [
								{
									"key": "eventId",
									"value": "{{eid}}",
									"description": "(Required) id события"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}",
									"description": "(Required) id пользователя"
								},
								{
									"key": "commentId",
									"value": "{{cid}}",
									"description": "(Required) id комменатрия"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария пользователя инициатором события",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"const source = JSON.parse(pm.collectionVariables.get(\"response\"));\r",
									"const commentId = pm.collectionVariables.get(\"cid\");\r",
									"\r",
									"pm.test(\"Комментарий должен быть найден до выполнения запроса\", function(){\r",
									"    pm.expect(source).to.have.property('id');\r",
									"    pm.expect(source).to.have.property('text');\r",
									"    pm.expect(source).to.have.property('author');\r",
									"    pm.expect(source).to.have.property('created');\r",
									"    pm.expect(source).to.have.property('lastUpdate');\r",
									"    pm.expect(source.id.toString()).to.equal(commentId.toString()); \r",
									"});\r",
									"let body\r",
									"const req = {\r",
									"                url: \"http://localhost:8080/comments/\" + pm.collectionVariables.get(\"cid\"),\r",
									"                method: \"GET\",\r",
									"                body: body == null ? \"\" : JSON.stringify(body),\r",
									"                header: { \"Content-Type\": \"application/json\" },\r",
									"            };\r",
									"pm.sendRequest(req, (error, response) => {\r",
									"    pm.test(\"Комментарий должен быть удалён после выполнения запроса\", function(){\r",
									"        pm.expect(response.code).to.equal(404); \r",
									"    });\r",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
									"        const userComment = await api.addUser(rnd.getUser());\r",
									"        pm.collectionVariables.set(\"uinid\", userInitiatorEvent.id);\r",
									"        \r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let eventModel = rnd.getEvent(category.id);\r",
									"        eventModel.participantLimit = 0;\r",
									"        eventModel.requestModeration = false;\r",
									"        let event = await api.addEvent(userInitiatorEvent.id, eventModel);\r",
									"        event = await api.publishEvent(event.id);\r",
									"        pm.collectionVariables.set(\"eid\", event.id)\r",
									"\r",
									"        const сomment = await api.addComment(userComment.id, event.id, rnd.getComment());\r",
									"        pm.collectionVariables.set(\"cid\", сomment.id);\r",
									"\r",
									"        const foundedComment = await api.findComment(сomment.id);\r",
									"        pm.collectionVariables.set(\"response\", JSON.stringify(foundedComment))\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/comments/:commentId?eventId={{eid}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"comments",
								":commentId"
							],
							"query": [
								{
									"key": "eventId",
									"value": "{{eid}}",
									"description": "(Required) id события"
								}
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uinid}}",
									"description": "(Required) id пользователя"
								},
								{
									"key": "commentId",
									"value": "{{cid}}",
									"description": "(Required) id комменатрия"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Validation",
			"item": [
				{
					"name": "Unrequired query params",
					"item": [
						{
							"name": "Получение всех комментариев события без нескольких Query params",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        \r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"\r",
											"        await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.json()).is.an('array');\r",
											"});\r",
											"\r",
											"const target = pm.response.json()[0];\r",
											"\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, author, created, lastUpdate\", function () {\r",
											"    pm.expect(target).to.contain.keys('id', 'text', 'author', 'created', 'lastUpdate');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/comments?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Required params in body",
					"item": [
						{
							"name": "Добавление комментария без поля text",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uinid\", userInitiatorEvent.id);\r",
											"\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        \r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"\r",
											"        comment = rnd.getComment();\r",
											"        delete comment[\"text\"];\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uinid}}",
											"description": "(Required) id пользователя"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Редактирование комментария пользователем без поля text",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    \r",
											"    let newComment\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", userInitiatorEvent.id)\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"\r",
											"        let oldComment = await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"cid\", oldComment.id)\r",
											"\r",
											"        newComment = rnd.getComment();\r",
											"        delete newComment[\"text\"];\r",
											"        pm.collectionVariables.set('response', newComment);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify(newComment),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id пользователя"
										},
										{
											"key": "commentId",
											"value": "{{cid}}",
											"description": "(Required) id комменатрия"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Редактирование  комментария администратором без поля text",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    \r",
											"    let newComment\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"\r",
											"        let oldComment = await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"cid\", oldComment.id)\r",
											"\r",
											"        newComment = rnd.getComment();\r",
											"        delete newComment[\"text\"];\r",
											"        pm.collectionVariables.set('response', newComment);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify(newComment),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "{{cid}}",
											"description": "(Required) id комменатрия"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария с пустым полем text",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uinid\", userInitiatorEvent.id);\r",
											"\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        \r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"\r",
											"        comment = rnd.getComment();\r",
											"        comment[\"text\"] = '';\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uinid}}",
											"description": "(Required) id пользователя"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Редактирование комментария пользователем с пустым полем text",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    \r",
											"    let newComment\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", userInitiatorEvent.id)\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"\r",
											"        let oldComment = await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"cid\", oldComment.id)\r",
											"\r",
											"        newComment = rnd.getComment();\r",
											"        newComment[\"text\"] = '';\r",
											"        pm.collectionVariables.set('response', newComment);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify(newComment),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id пользователя"
										},
										{
											"key": "commentId",
											"value": "{{cid}}",
											"description": "(Required) id комменатрия"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Редактирование  комментария администратором с пустым полем text",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    \r",
											"    let newComment\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"\r",
											"        let oldComment = await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"cid\", oldComment.id)\r",
											"\r",
											"        newComment = rnd.getComment();\r",
											"        newComment[\"text\"] = '';\r",
											"        pm.collectionVariables.set('response', newComment);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify(newComment),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "{{cid}}",
											"description": "(Required) id комменатрия"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление комментария со строкой из пробелов в качестве текста",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uinid\", userInitiatorEvent.id);\r",
											"\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        \r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"\r",
											"        comment = rnd.getComment();\r",
											"        comment[\"text\"] = '                     ';\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uinid}}",
											"description": "(Required) id пользователя"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Редактирование комментария пользователем со строкой из пробелов в качестве текста",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    \r",
											"    let newComment\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", userInitiatorEvent.id)\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"\r",
											"        let oldComment = await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"cid\", oldComment.id)\r",
											"\r",
											"        newComment = rnd.getComment();\r",
											"        newComment[\"text\"] = '                     ';\r",
											"        pm.collectionVariables.set('response', newComment);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify(newComment),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId?eventId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"query": [
										{
											"key": "eventId",
											"value": null,
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id пользователя"
										},
										{
											"key": "commentId",
											"value": "{{cid}}",
											"description": "(Required) id комменатрия"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Редактирование  комментария администратором со строкой из пробелов в качестве текста",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    \r",
											"    let newComment\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"\r",
											"        let oldComment = await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"cid\", oldComment.id)\r",
											"\r",
											"        newComment = rnd.getComment();\r",
											"        newComment[\"text\"] = '                     ';\r",
											"        pm.collectionVariables.set('response', newComment);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify(newComment),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "{{cid}}",
											"description": "(Required) id комменатрия"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Misc tests",
					"item": [
						{
							"name": "Добавление нового комментария несуществующим пользователем",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"let comment;\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", userInitiatorEvent.id + 1);\r",
											"\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        \r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"\r",
											"        comment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.be.notFound;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id пользователя"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление нового комментария к несуществующему событию",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uinid\", userInitiatorEvent.id);\r",
											"\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id + 1);\r",
											"\r",
											"        comment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.be.notFound;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uinid}}",
											"description": "(Required) id пользователя"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление нового комментария к неопубликованному событию",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uinid\", userInitiatorEvent.id);\r",
											"\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"\r",
											"        comment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uinid}}",
											"description": "(Required) id пользователя"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление нового комментария пользователем, не являющимся инициатором события и не имеющего одобренного запроса на участие",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        const userComment = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", userComment.id);\r",
											"\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let eventModel = rnd.getEvent(category.id);\r",
											"        eventModel.participantLimit = 100;\r",
											"        eventModel.requestModeration = true;\r",
											"\r",
											"        let event = await api.addEvent(userInitiatorEvent.id, eventModel);\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"\r",
											"        comment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id пользователя"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Редактирование комментария несуществующим пользователем",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    \r",
											"    let newComment\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", userInitiatorEvent.id + 1);\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"\r",
											"        let oldComment = await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"cid\", oldComment.id)\r",
											"\r",
											"        newComment = rnd.getComment();\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify(newComment),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.be.notFound;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id пользователя"
										},
										{
											"key": "commentId",
											"value": "{{cid}}",
											"description": "(Required) id комменатрия"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Редактирование комментария у несуществующего события",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    \r",
											"    let newComment\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", userInitiatorEvent.id)\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id + 1)\r",
											"\r",
											"        let oldComment = await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"cid\", oldComment.id)\r",
											"\r",
											"        newComment = rnd.getComment();\r",
											"        pm.collectionVariables.set('response', newComment);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify(newComment),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.be.notFound;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id пользователя"
										},
										{
											"key": "commentId",
											"value": "{{cid}}",
											"description": "(Required) id комменатрия"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Редактирование несуществующего комментария",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    \r",
											"    let newComment\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", userInitiatorEvent.id)\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"\r",
											"        let oldComment = await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"cid\", oldComment.id + 1)\r",
											"\r",
											"        newComment = rnd.getComment();\r",
											"        pm.collectionVariables.set('response', newComment);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify(newComment),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.be.notFound;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id пользователя"
										},
										{
											"key": "commentId",
											"value": "{{cid}}",
											"description": "(Required) id комменатрия"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Редактирование комментария пользователем не являющимся инициатором события и не являющимся автором комментария",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    \r",
											"    let newComment\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        const userComment = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", userComment.id);\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"\r",
											"        let oldComment = await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"cid\", oldComment.id)\r",
											"\r",
											"        newComment = rnd.getComment();\r",
											"        pm.collectionVariables.set('response', newComment);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify(newComment),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id пользователя"
										},
										{
											"key": "commentId",
											"value": "{{cid}}",
											"description": "(Required) id комменатрия"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария несуществующим пользователем",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", userInitiatorEvent.id + 1)\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"\r",
											"        const сomment = await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"cid\", сomment.id);\r",
											"\r",
											"        const foundedComment = await api.findComment(сomment.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.be.notFound;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id пользователя"
										},
										{
											"key": "commentId",
											"value": "{{cid}}",
											"description": "(Required) id комменатрия"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария у несуществующего события",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", userInitiatorEvent.id)\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id + 1)\r",
											"\r",
											"        const сomment = await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"cid\", сomment.id);\r",
											"\r",
											"        const foundedComment = await api.findComment(сomment.id);\r",
											"        pm.collectionVariables.set(\"response\", foundedComment)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.be.notFound;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id пользователя"
										},
										{
											"key": "commentId",
											"value": "{{cid}}",
											"description": "(Required) id комменатрия"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление несуществующего комментария",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", userInitiatorEvent.id)\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"\r",
											"        const сomment = await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"cid\", сomment.id + 1);\r",
											"\r",
											"        const foundedComment = await api.findComment(сomment.id);\r",
											"        pm.collectionVariables.set(\"response\", foundedComment)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
											"    pm.response.to.be.notFound;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id пользователя"
										},
										{
											"key": "commentId",
											"value": "{{cid}}",
											"description": "(Required) id комменатрия"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление комментария пользователем, не являющимся автором комментария и не являющимся инициатором события",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        const userComment = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", userComment.id);\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"\r",
											"        const сomment = await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"cid\", сomment.id);\r",
											"\r",
											"        const foundedComment = await api.findComment(сomment.id);\r",
											"        pm.collectionVariables.set(\"response\", foundedComment)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id пользователя"
										},
										{
											"key": "commentId",
											"value": "{{cid}}",
											"description": "(Required) id комменатрия"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "String length restrictions",
					"item": [
						{
							"name": "Добавление нового комментария с text < 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uinid\", userInitiatorEvent.id);\r",
											"\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        \r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"\r",
											"        comment = rnd.getComment();\r",
											"        comment.text = rnd.getWord(1);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uinid}}",
											"description": "(Required) id пользователя"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Редактирование  комментария пользователем с text < 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    \r",
											"    let newComment\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", userInitiatorEvent.id)\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"\r",
											"        let oldComment = await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"cid\", oldComment.id)\r",
											"\r",
											"        newComment = rnd.getComment();\r",
											"        newComment.text = rnd.getWord(1);\r",
											"        pm.collectionVariables.set('response', newComment);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify(newComment),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id пользователя"
										},
										{
											"key": "commentId",
											"value": "{{cid}}",
											"description": "(Required) id комменатрия"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Редактирование  комментария администратором с text > 2",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    \r",
											"    let newComment\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"\r",
											"        let oldComment = await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"cid\", oldComment.id)\r",
											"\r",
											"        newComment = rnd.getComment();\r",
											"        newComment.text = rnd.getWord(1);\r",
											"        pm.collectionVariables.set('response', newComment);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify(newComment),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "{{cid}}",
											"description": "(Required) id комменатрия"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Добавление нового комментария с text > 1000",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let comment;\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uinid\", userInitiatorEvent.id);\r",
											"\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        \r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id);\r",
											"\r",
											"        comment = rnd.getComment();\r",
											"        comment.text = rnd.getWord(1001);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(comment),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uinid}}",
											"description": "(Required) id пользователя"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Редактирование  комментария пользователем с text > 1000",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    \r",
											"    let newComment\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        pm.collectionVariables.set(\"uid\", userInitiatorEvent.id)\r",
											"        \r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"\r",
											"        let oldComment = await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"cid\", oldComment.id)\r",
											"\r",
											"        newComment = rnd.getComment();\r",
											"        newComment.text = rnd.getWord(1001);\r",
											"        pm.collectionVariables.set('response', newComment);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify(newComment),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/comments/:commentId?eventId={{eid}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"comments",
										":commentId"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}",
											"description": "(Required) id события"
										}
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{uid}}",
											"description": "(Required) id пользователя"
										},
										{
											"key": "commentId",
											"value": "{{cid}}",
											"description": "(Required) id комменатрия"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Редактирование  комментария администратором с text > 1000",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"    \r",
											"    let newComment\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"\r",
											"        let oldComment = await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
											"        pm.collectionVariables.set(\"cid\", oldComment.id)\r",
											"\r",
											"        newComment = rnd.getComment();\r",
											"        newComment.text = rnd.getWord(1001);\r",
											"        pm.collectionVariables.set('response', newComment);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"            mode: 'raw',\r",
											"            raw: JSON.stringify(newComment),\r",
											"            options: { raw: { language: 'json' } }\r",
											"        });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
											"    pm.response.to.be.badRequest;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/comments/:commentId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"comments",
										":commentId"
									],
									"variable": [
										{
											"key": "commentId",
											"value": "{{cid}}",
											"description": "(Required) id комменатрия"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Default values check",
					"item": [
						{
							"name": "Получение всех комментариев события. Проверка на значения по-умолчанию from",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        \r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"\r",
											"        await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.json()).is.an('array');\r",
											"});\r",
											"\r",
											"const target = pm.response.json()[0];\r",
											"\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, author, created, lastUpdate\", function () {\r",
											"    pm.expect(target).to.contain.keys('id', 'text', 'author', 'created', 'lastUpdate');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/comments?eventId={{eid}}&size=1000",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}"
										},
										{
											"key": "size",
											"value": "1000"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение всех комментариев события. Проверка на значения по-умолчанию size",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const userInitiatorEvent = await api.addUser(rnd.getUser());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        \r",
											"        let event = await api.addEvent(userInitiatorEvent.id, rnd.getEvent(category.id));\r",
											"        event = await api.publishEvent(event.id);\r",
											"        pm.collectionVariables.set(\"eid\", event.id)\r",
											"\r",
											"        await api.addComment(userInitiatorEvent.id, event.id, rnd.getComment());\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.be.ok;    \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"    pm.expect(pm.response.json()).is.an('array');\r",
											"});\r",
											"\r",
											"const target = pm.response.json()[0];\r",
											"\r",
											"pm.test(\"Комментарий должен содержать поля: id, text, author, created, lastUpdate\", function () {\r",
											"    pm.expect(target).to.contain.keys('id', 'text', 'author', 'created', 'lastUpdate');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(target.id).to.not.be.null;\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/comments?eventId={{eid}}&from=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"comments"
									],
									"query": [
										{
											"key": "eventId",
											"value": "{{eid}}"
										},
										{
											"key": "from",
											"value": "0"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addUser(user, verbose=null) {\r",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCategory(category, verbose=null) {\r",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addEvent(userId, event, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCompilation(compilation, verbose=null) {\r",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addComment(userId, eventId, comment, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/comments?eventId=\" + eventId, comment, \"Ошибка при добавлении нового комментария: \", verbose);\r",
					"    }\r",
					"\r",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {\r",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async publishEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);\r",
					"    }\r",
					"    \r",
					"    async rejectEvent(eventId, verbose=null) {\r",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);\r",
					"    }\r",
					"\r",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {\r",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCategory(catId, verbose=null) {\r",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findCompilation(compId, verbose=null) {\r",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findEvent(eventId, verbose=null) {\r",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findUser(userId, verbose=null) {\r",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findComment(commentId, verbose=null) {\r",
					"        return this.get('/comments/' + commentId, null, \"Ошибка при поиске комментария по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findComments(eventId, verbose=null) {\r",
					"        return this.get('/comments?eventId=' + eventId, null, \"Ошибка при поиске комментариев по eventId\", verbose);\r",
					"    }\r",
					"\r",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"            if(verbose) {\r",
					"                console.log(\"Отправляю запрос: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if(verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
					"                    }\r",
					"                    if (response.stream.length === 0){\r",
					"                        reject(new Error('Отправлено пустое тело ответа'))\r",
					"                    }else{\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"    constructor() {}\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCategory() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getEvent(categoryId) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: {\r",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),\r",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),\r",
					"            },\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getCompilation(...eventIds) {\r",
					"        return {\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),\r",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            events: eventIds\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getComment() {\r",
					"        return {\r",
					"            text: pm.variables.replaceIn('{{$randomPhrase}}')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"\r",
					"    getWord(length = 1) {\r",
					"        let result = '';\r",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
					"        const charactersLength = characters.length;\r",
					"        let counter = 0;\r",
					"        while (counter < length) {\r",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
					"            counter += 1;\r",
					"        }\r",
					"        return result;\r",
					"    }\r",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "default"
		},
		{
			"key": "eid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "cid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "uid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "uinid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "response",
			"value": "",
			"type": "string"
		}
	]
}